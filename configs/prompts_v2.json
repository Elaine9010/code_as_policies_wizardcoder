{"prompt_tabletop_ui": "# Python 2D robot control script\nimport numpy as np\nfrom env_utils import put_first_on_second, get_obj_pos, get_obj_names, say, get_corner_name, get_side_name\nfrom plan_utils import parse_obj_name, parse_position, parse_question\n\n# objects = ['red block', 'green block', 'red bowl', 'blue block', 'blue bowl', 'green bowl']\n# place the red block on the red bowl.\nsay('Ok - putting the red block on the red bowl')\nput_first_on_second('red block', 'red bowl')\n<EOS>\n\n# objects = ['red block', 'green block', 'red bowl', 'blue block', 'blue bowl', 'green bowl']\n# move the green block to the top right corner.\nsay('Got it - getting the position of the target corner')\ncorner_pos = parse_position('top right corner')\nsay('Moving the green block to the top right corner')\nput_first_on_second('green block', corner_pos)\n<EOS>\n\n# objects = ['red block', 'green block', 'red bowl', 'blue block', 'blue bowl', 'green bowl']\n# put the blue block on the bowl closest to it.\nsay('Ok - getting the name of the target bowl')\nclosest_bowl_name = parse_obj_name('the bowl closest to the blue block', f'objects = {get_obj_names()}')\nsay(f'Putting the blue block on the {closest_bowl_name}')\nput_first_on_second('blue block', closest_bowl_name)\n<EOS>\n\n# objects = ['red block', 'green block', 'red bowl', 'blue block', 'blue bowl', 'green bowl']\n# put the green block on the bowl farthest to it.\nsay('Ok - getting the name of the target bowl')\nfarthest_bowl_name = parse_obj_name('the bowl farthest to the green block', f'objects = {get_obj_names()}')\nsay(f'Putting the green block on the {farthest_bowl_name}')\nput_first_on_second('green block', farthest_bowl_name)\n<EOS>\n\n# objects = ['red block', 'green block', 'red bowl', 'blue block', 'blue bowl', 'green bowl']\n# put the blue block on the corner closest to it.\nsay('Ok - getting the position of the target corner')\ntarget_corner_pos = parse_position('the corner closest to the blue block')\ntarget_corner_name = get_corner_name(target_corner_pos)\nsay(f'Putting the blue block in the {target_corner_name}')\nput_first_on_second('blue block', target_corner_pos)\n<EOS>\n\n# objects = ['red block', 'red block', 'red bowl', 'gray block', 'gray bowl', 'red bowl']\n# put the red block on the corner farthest to it.\nsay('Ok - getting the position of the target corner')\ntarget_corner_pos = parse_position('the corner farthest to the red block')\ntarget_corner_name = get_corner_name(target_corner_pos)\nsay(f'Putting the red block in the {target_corner_name}')\nput_first_on_second('red block', target_corner_pos)\n<EOS>\n\n# objects = ['pink block', 'green block', 'pink bowl', 'blue block', 'blue bowl', 'green bowl']\n# move the green bowl 10cm to its left.\nsay('Sure - getting the target position')\ntarget_pos = parse_position('a point 10cm left of the green bowl')\nsay('Moving the green bowl to the target position')\nput_first_on_second('green bowl', target_pos)\n<EOS>\n\n# objects = ['cyan block', 'white block', 'cyan bowl', 'blue block', 'blue bowl', 'white bowl']\n# move the cyan block into its corresponding bowl.\nsay('Ok - finding matching bowl for the cyan block')\nmatches = {'cyan block': 'cyan bowl'}\nsay('Placing the cyan block on the cyan bowl')\nfor first, second in matches.items():\n    put_first_on_second(first, get_obj_pos(second))\n<EOS>\n\n# objects = ['red block', 'green block', 'red bowl', 'gray block', 'gray bowl', 'green bowl']\n# put all the blocks in their corresponding bowls.\nsay('Ok - finding matches between blocks and bowls')\nmatches = {'red block': 'red bowl', 'green block': 'green bowl', 'gray block': 'gray bowl'}\nsay('Putting all the blocks in their corresponding bowls')\nfor first, second in matches.items():\n    say(f'Placing the {first} on the {second}')\n    put_first_on_second(first, get_obj_pos(second))\n<EOS>", "prompt_parse_position": "import numpy as np\nfrom env_utils import denormalize_xy, parse_obj_name, get_obj_names, get_obj_pos\n\n# top left corner\nsay('Ok - getting the denormalized position of the top left corner')\nret_val = denormalize_xy([0, 1])\n<EOS>\n\n# bottom right corner\nsay('Ok - getting the denormalized position of the bottom right corner')\nret_val = denormalize_xy([1, 0])\n<EOS>\n\n# the bottom side.\nsay('Ok - getting the denormalized position of the bottom side')\nret_val = denormalize_xy([0.5, 0])\n<EOS>\n\n# the corner closest to the red block.\nsay('Ok - getting the position of the target object')\ntarget_obj_name = \"red block\"\ntarger_obj_pos = get_obj_pos(target_obj_name)\nsay('Getting the position of the closest corner to the target object')\ncorner_positions = np.array([denormalize_xy(pos) for pos in [[0, 0], [0, 1], [1, 1], [1, 0]]])\nclosest_idx = get_closest_idx(points=corner_positions, point=targer_obj_pos)\nclosest_corner_pos = corner_positions[closest_idx]\nret_val = = closest_corner_pos\n<EOS>\n\n# the bowl farthest to the blue block.\nsay('Ok - getting the position of the target object')\ntarget_obj_name = \"blue block\"\nsay('Getting the name of the farthest bowl to the target object')\nfarthest_bowl_name =parse_obj_name(f'the bowl farthest to the {target_obj_name}', f'objects = {get_obj_names()}')\n<EOS>\n\n# a point 5cm left of the green bowl.\nsay('Ok - getting the position of the target point')\nbowl_position = get_obj_pos(\"green bowl\")\ntarget_point_pos = bowl_position + [-0.05, 0]\nret_val = target_point_pos\n<EOS>", "prompt_parse_obj_name": "# objects = ['blue block', 'cyan block', 'purple bowl', 'gray bowl', 'brown bowl', 'purple block']\n# the block closest to the purple bowl.\nblock_names = ['blue block', 'cyan block', 'purple block']\nsay(f'Ok - finding the block closest to the purple bowl in the {block_names}}')\nblock_positions = get_obj_positions_np(block_names)\ntarget_obj_idx = get_closest_idx(points=block_positions, point=get_obj_pos('purple bowl'))\ntarget_obj_name = block_names[target_obj_idx]\nret_val = target_obj_name\n<EOS>\n\n# objects = ['brown bowl', 'banana', 'brown block', 'apple', 'blue bowl', 'blue block']\n# the blocks.\nsay('Ok - finding the blocks in the objects list.')\nret_val = ['brown block', 'blue block']\n<EOS>\n\n# objects = ['brown bowl', 'banana', 'brown block', 'apple', 'blue bowl', 'blue block']\n# the brown objects.\nsay('Ok - finding the brown objects in the objects list.')\nret_val = ['brown bowl', 'brown block']\n<EOS>\n\n# objects = ['blue block', 'cyan block', 'purple bowl', 'brown bowl', 'purple block']\n# the blue block.\nsay('Ok - finding the blue block in the objects list.')\nret_val = 'blue block'\n<EOS>\n\n# objects = ['blue block', 'cyan block', 'purple bowl', 'brown bowl', 'purple block']\n# the bowl closest to the bottom right corner.\nsay('Ok - getting the position of the bottom right corner')\ncorner_pos = parse_position('bottom right corner')\nsay('Finding the bowl closest to the corner position')\nbowl_names = ['blue bowl', 'cyan bowl', 'purple bowl']\nbowl_positions = get_obj_positions_np(bowl_names)\ntarget_obj_idx = get_closest_idx(points=bowl_positions, point=corner_pos)\ntarget_obj_name = bowl_names[target_obj_idx]\nret_val = target_obj_name\n<EOS>\n\n# objects = ['brown bowl', 'green block', 'brown block', 'green bowl', 'blue bowl', 'blue block']\n# the left most block.\nblock_names = ['green block', 'brown block', 'blue block']\nsay(f'Ok - finding the left most block in the {block_names}'})\nblock_positions = get_obj_positions_np(block_names)\ntarget_obj_idx = np.argsort(block_positions[:, 0])[0]\ntarget_obj_name = block_names[target_obj_idx]\nret_val = target_obj_name\n<EOS>\n\n# objects = ['red bowl', 'purple block', 'red block', 'purple bowl', 'pink bowl', 'pink block']\n# the first bowl from the right.\nbowl_names = ['red bowl', 'purple bowl', 'pink bowl']\nsay(f'Ok - finding the first bowl from the right in the {bowl_names}')\nbowl_positions = get_obj_positions_np(bowl_names)\ntarget_obj_idx = np.argsort(bowl_positions[:, 0])[-1]\ntarget_obj_name = bowl_names[target_obj_idx]\nret_val = target_obj_name\n<EOS>", "prompt_parse_question": "from utils import get_obj_pos, get_obj_names, parse_obj_name, bbox_contains_pt, is_obj_visible\n\n# objects = ['yellow bowl', 'blue block', 'yellow block', 'blue bowl', 'fruit', 'green block', 'black bowl']\n# is the blue block to the right of the yellow bowl?\nret_val = get_obj_pos('blue block')[0] > get_obj_pos('yellow bowl')[0]\n\n# objects = ['yellow bowl', 'blue block', 'yellow block', 'blue bowl', 'fruit', 'green block', 'black bowl']\n# how many yellow objects are there?\nyellow_object_names = parse_obj_name('the yellow objects', f'objects = {get_obj_names()}')\nret_val = len(yellow_object_names)\n\n# objects = ['pink block', 'green block', 'pink bowl', 'blue block', 'blue bowl', 'green bowl']\n# is the pink block on the green bowl?\nret_val = bbox_contains_pt(container_name='green bowl', obj_name='pink block')\n\n# objects = ['pink block', 'green block', 'pink bowl', 'blue block', 'blue bowl', 'green bowl']\n# what are the blocks left of the green bowl?\nblock_names = parse_obj_name('the blocks', f'objects = {get_obj_names()}')\ngreen_bowl_pos = get_obj_pos('green bowl')\nleft_block_names = []\nfor block_name in block_names:\n  if get_obj_pos(block_name)[0] < green_bowl_pos[0]:\n    left_block_names.append(block_name)\nret_val = left_block_names\n\n# objects = ['pink block', 'yellow block', 'pink bowl', 'blue block', 'blue bowl', 'yellow bowl']\n# is the sun colored block above the blue bowl?\nsun_block_name = parse_obj_name('sun colored block', f'objects = {get_obj_names()}')\nsun_block_pos = get_obj_pos(sun_block_name)\nblue_bowl_pos = get_obj_pos('blue bowl')\nret_val = sun_block_pos[1] > blue_bowl_pos[1]\n\n# objects = ['pink block', 'yellow block', 'pink bowl', 'blue block', 'blue bowl', 'yellow bowl']\n# is the green block below the blue bowl?\nret_val = get_obj_pos('green block')[1] < get_obj_pos('blue bowl')[1]", "prompt_fgen": "import numpy as np\nfrom env_utils import get_obj_pos, get_obj_names\nfrom ctrl_utils import put_first_on_second\n\n# define function: total = get_total(xs=numbers).\ndef get_total(xs):\n    return np.sum(xs)\n<EOS>\n\n# define function: pt = get_pt_to_the_left(pt, dist).\ndef get_pt_to_the_left(pt, dist):\n    return pt + [-dist, 0]\n<EOS>\n\n# define function: pt = get_pt_to_the_top(pt, dist).\ndef get_pt_to_the_top(pt, dist):\n    return pt + [0, dist]\n<EOS>", "prompt_transform_shape_pts": "import numpy as np\nfrom utils import get_obj_pos, get_obj_names, parse_position, parse_obj_name\n\n# make it bigger by 1.5.\nnew_shape_pts = scale_pts_around_centroid_np(shape_pts, scale_x=1.5, scale_y=1.5)\n# move it to the right by 10cm.\nnew_shape_pts = translate_pts_np(shape_pts, delta=[0.1, 0])\n# move it to the top by 20cm.\nnew_shape_pts = translate_pts_np(shape_pts, delta=[0, 0.2])\n# rotate it clockwise by 40 degrees.\nnew_shape_pts = rotate_pts_around_centroid_np(shape_pts, angle=-np.deg2rad(40))\n# rotate by 30 degrees and make it slightly smaller\nnew_shape_pts = rotate_pts_around_centroid_np(shape_pts, angle=np.deg2rad(30))\nnew_shape_pts = scale_pts_around_centroid_np(new_shape_pts, scale_x=0.7, scale_y=0.7)\n# move it toward the blue block.\nblock_name = parse_obj_name('the blue block', f'objects = {get_obj_names()}')\nblock_pos = get_obj_pos(block_name)\nmean_delta = np.mean(block_pos - shape_pts, axis=1)\nnew_shape_pts = translate_pts_np(shape_pts, mean_delta)"}